<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Question type class for the omerocommon question type.
 *
 * @package    qtype
 * @subpackage omerocommon
 * @copyright  2015 CRS4
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later //FIXME: check the licence
 */


defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir . '/questionlib.php');
require_once($CFG->dirroot . '/question/engine/lib.php');
require_once($CFG->dirroot . '/question/type/multichoice/questiontype.php');


/**
 * The omeromultichoice question type.
 *
 * @copyright  2015 CRS4
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later // FIXME: check the licence
 */
abstract class qtype_omerocommon extends qtype_multichoice
{

    /**
     * Returns the name of the concrete class
     * which this class subsumes.
     *
     * @return string
     */
    protected function get_qtype()
    {
        return get_class($this);
    }


    /**
     * Returns the name of the table to store questions
     * represented by the subclasses of this base class.
     * Note that we reduce the table name due to the
     * limitation which imposes table names of 28 characters.
     *
     * @return mixed
     */
    protected function get_table_name()
    {
        return str_replace("omero", "ome", get_class($this)) . "_options";
    }

    /**
     * If your question type has a table that extends the question table, and
     * you want the base class to automatically save, backup and restore the extra fields,
     * override this method to return an array wherer the first element is the table name,
     * and the subsequent entries are the column names (apart from id and questionid).
     *
     * @return mixed array as above, or null to tell the base class to do nothing.
     */
    public function extra_question_fields()
    {
        return array($this->get_table_name(),
            "omeroimageurl", "visiblerois", "omeroimagelocked", "omeroimageproperties"
        );
    }


    protected function make_question_instance($questiondata)
    {
        question_bank::load_question_definition_classes($this->name());
        $class = get_class($this);
        if ($questiondata->options->single) {
            $class = $class . '_single_question';
        } else {
            $class = $class . '_multi_question';
        }
        return new $class();
    }


    public function get_question_options($question)
    {
        global $DB;
        $question->options = $DB->get_record($this->get_table_name(),
            array('questionid' => $question->id), '*', MUST_EXIST);
        question_type::get_question_options($question);
    }

    public function save_question($question, $form)
    {
        global $DB;
        $question = parent::save_question($question, $form);
        if ($question) {
            $question->questiontext = qtype_omerocommon::serialize_to_multilang_form($form->questiontext_locale_map);
            $question->generalfeedback = qtype_omerocommon::serialize_to_multilang_form($form->generalfeedback_locale_map);
            $DB->update_record('question', $question);
        }
        return $question;
    }


    protected function initialise_question_instance(question_definition $question, $questiondata)
    {
        parent::initialise_question_instance($question, $questiondata);
    }


    public function delete_question($questionid, $contextid)
    {
        global $DB;
        $DB->delete_records($this->get_table_name(), array('questionid' => $questionid));
        parent::delete_question($questionid, $contextid);
    }

    public function save_question_answers($question)
    {
        parent::save_question_answers($question); // TODO: Change the autogenerated stub
    }


    public static function serialize_to_multilang_form($json_format)
    {
        $result = "";
        foreach (json_decode($json_format) as $lang => $text) {
            $result .= '<span class="multilang" lang="' . $lang . '">' . $text . '</span>';
        }
        return $result;
    }


    /**
     * Returns the list of span[@multilang]
     * contained within the given <pre>$html</pre>
     *
     * @param $multilang_format
     * @return array array of pairs (language, string)
     */
    public static function serialize_to_json_from($multilang_format)
    {
        $result = array();
        $dom = new DOMDocument();
        $dom->strictErrorChecking = FALSE;
        $dom->loadHTML('<?xml version="1.0" encoding="UTF-8"?><html><body>' . $multilang_format . '</body></html>');
        $finder = new DomXPath($dom);
        $classname = "multilang";
        $nodes = $finder->query("//*[contains(concat(' ', normalize-space(@class), ' '), ' $classname ')]");
        foreach ($nodes as $node) {
            $result[$node->getAttribute("lang")] = self::DOMinnerHTML($node);
        }
        return $result;
    }

    /**
     * Returns the innerHTML of a given DOMNode
     *
     * @param DOMNode $element
     * @return string
     */
    private static function DOMinnerHTML(DOMNode $element)
    {
        $innerHTML = "";
        $children = $element->childNodes;
        foreach ($children as $child) {
            $innerHTML .= $element->ownerDocument->saveHTML($child);
        }
        return $innerHTML;
    }
}
